# docker-glftpd::template

########################
# SPY.PY CONFIGURATION #
########################

glrootpath = /glftpd
#maxusers = 50
maxusers = -1
ipc_key = 0x0000DEAD
idle_barrier = 30
speed_threshold = 1024
refresh = 1
color = 1
debug = 0


[WEB]
flask_host = 127.0.0.1
flask_port = 5000
httpd_host = 127.0.0.1
httpd_port = 8080


[GEOIP]
geoip2_enable = False
geoip2_accountid = 
geoip2_licensekey = 
geoip2_proxy = None


### CONFIG OPTIONS: ############################################################
# glrootpath = /glftpd/ ... rootpath of glftpd
# headerfile = /ftp-data/misc/who.head ... shown before the list of users in non-raw mode.
# footerfile = /ftp-data/misc/who.foot ... shown below the list of users in non-raw mode.
# maxusers = 20 ... max users displayed on output
# ipc_key = 0x0000DEAD ... ipc-key used in glftpd
# grp_path = /etc/group ... (chroot'ed) path to glftpd's groupfile
# idle_barrier = 30 ... when a user has been idle for more than this number, he is considered an idler. if less,
#                       he is considered a browser.
# speed_threshold = 1024 ... threshold (in KB/s) for changing between KB/s and MB/s in the output.
# refresh = 1 ... cli refresh rate in sec, e.g. faster 0.5 slower 3 (default 1s)
# debug = 0|1 ... if set to 1 debug output is shown. Should not be used unless needed.
#
# color = 0|1 ... set to 0 to disable colors
#
# note: to 'dynamically' get max users value from glftpd.conf instead, set this:
#       maxusers = -1

### GEOIP: #####################################################################
# geoip2_enable =  False
# geoip2_accountid =
# geoip2_licensekey =
# geoip2_proxy = http://u:p@host:port ... optional http proxy, None to disable.

### WEB: #######################################################################
# set host:port for built-in and flask webserver

### ARGS: ######################################################################
# spy.py takes several args:
# ./spy             run spy in cli mode (default, no args)
# ./spy --web       run webspy using flask (css, templates & js)
# ./spy --httpd     run webspy using built in httpd (basic)

######################################################################## EOF ###
